name: "KiCad CI/CD for ft231x_uart_usb_power_switch"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    paths:
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.sch'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.kicad_pcb'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.kibot.yaml'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/Makefile'
      - '.github/workflows/ft231x_uart_usb_power_switch.yml'
  pull_request:
    paths:
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.sch'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.kicad_pcb'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/*.kibot.yaml'
      - 'hardware/kicad/ft231x_uart_usb_power_switch/Makefile'
      - '.github/workflows/ft231x_uart_usb_power_switch.yml'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ERC:
    runs-on: ubuntu-latest
    container: setsoft/kicad_auto:dev_k6

    steps:
    - uses: actions/checkout@v2

    - name: Run ERC
      run: |
        make -C hardware/kicad/ft231x_uart_usb_power_switch erc

    - name: Retrieve results
      uses: actions/upload-artifact@v1
      with:
        name: ERC_Output
        path: hardware/kicad/ft231x_uart_usb_power_switch/fabrication

  DRC:
    runs-on: ubuntu-latest
    container: setsoft/kicad_auto:latest
    needs: ERC

    steps:
    - uses: actions/checkout@v2

    - name: Run DRC
      run: |
        make -C hardware/kicad/ft231x_uart_usb_power_switch drc

    - name: Retrieve results
      uses: actions/upload-artifact@v1
      with:
        name: DRC_Output
        path: hardware/kicad/ft231x_uart_usb_power_switch/fabrication

  FabSch:
    name: Schematic fabrication files
    runs-on: ubuntu-latest
    container: setsoft/kicad_auto:latest
    needs: ERC

    steps:
    - uses: actions/checkout@v2

    - name: Run schematic stuff
      run: |
        make -C hardware/kicad/ft231x_uart_usb_power_switch sch_fab

    - name: Retrieve results
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: FabSch_Output
        path: |
          hardware/kicad/ft231x_uart_usb_power_switch/fabrication/
          hardware/kicad/ft231x_uart_usb_power_switch/kibot_error.log
        if-no-files-found: warn

  FabPCB:
    name: PCB fabrication files
    runs-on: ubuntu-latest
    container: setsoft/kicad_auto:latest
    needs: DRC

    steps:
    - name: Install Additional Software
      run: |
        apt update
        apt -y install git openscad python3-pip zip
        pip3 install kikit

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Update git hash on PCB silk
      if: github.ref != 'refs/heads/master'
      run: |
        export COMMIT=$(git rev-parse --short HEAD)
        echo "COMMIT = ${COMMIT}"
        sed -i "s!<<hash>>!-${COMMIT}!" hardware/kicad/ft231x_uart_usb_power_switch/*.kicad_pcb

    # - name: Remove git hash on main branch PCB silk
    #  if: github.ref == 'refs/heads/main'
    #  run: |
    #    sed -i "s!<<hash>>!!" hardware/kicad/ft231x_uart_usb_power_switch/*.kicad_pcb

    - name: Run PCB stuff
      run: |
        make -C hardware/kicad/ft231x_uart_usb_power_switch pcb_fab
        make -C hardware/kicad/ft231x_uart_usb_power_switch pcb_stencil

    - name: Retrieve results
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: FabPCB_Output
        path: |
          hardware/kicad/ft231x_uart_usb_power_switch/fabrication/
          hardware/kicad/ft231x_uart_usb_power_switch/kibot_error.log
        if-no-files-found: warn

  Release:
    needs: [ERC, DRC, FabSch, FabPCB]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve
        uses: actions/download-artifact@v2
        with:
          path: fabrication

      - name: Zip
        run: |
          zip -r fabrication.zip ./
        working-directory: fabrication

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          asset_path: ./fabrication/fabrication.zip
          asset_name: fabrication.zip
          asset_content_type: application/zip
